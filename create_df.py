"""
Script for creating a dataframe of posterior probabilities generated by probabilistic detectors, 
for all the high-level attributes, S01-S25 as per user-specified train/dev/eval set.

"""

import os
import json
import numpy as np
import pandas as pd
import warnings
import torch
import torch.nn as nn
from torch.utils.data import DataLoader
import torch.nn.functional as F
from scipy.special import logit

warnings.filterwarnings("ignore", category=FutureWarning)

from fetch_data_function import Dataloader_emb_all, all_info
from emb_model import emb_fully_1

import configparser

config = configparser.ConfigParser()
config.read('emb_model_AASIST.conf')

set = config['create_df']['set']
data_file = str(config['data-path'][set + '_data'])

log_dir = 'df_posterior_probabilities/'
os.makedirs(log_dir, exist_ok=True)

df_org = pd.read_csv(data_file, names=['speaker', 'ID', '-', 'spoof_attack', 'target'], sep=' ')
df = df_org.drop(['speaker', '-'], axis=1)

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

def attribut_type_index(att_type):
    if att_type==1:
        st=0
        en=2
    if att_type==2:
        st=2
        en=5
    if att_type==3:
        st=5
        en=8
    if att_type==4:
        st=8
        en=13
    if att_type==5:
        st=13
        en=16
    if att_type==6:
        st=16
        en=21
    if att_type==7:
        st=21
        en=25
    return st,en

# Define the softmax function
def softmax(x):
    e_x = np.exp(x - np.max(x))  # Subtracting max(x) for numerical stability
    return e_x / e_x.sum(axis=0)

set_data1 = all_info(config['emb-path'][set + '_emb'])
set_data = Dataloader_emb_all(set_data1)
set_loader = DataLoader(set_data, batch_size = int(config['model-config']['batch_size']), shuffle=False, drop_last=False, pin_memory=True)

# Define model
in_dim = int(config['model-config']['in_dim'])
hdim = json.loads(config['create_df']['common_arch'])

for i in range(1, 8):

    st, en = attribut_type_index(i)
    model = emb_fully_1(idim=in_dim, hdim=hdim, odim=en-st).to(device)
    model_architecture = 'AS' + str(i) + '_' + config['create_df']['common_arch'] 
    model.load_state_dict(torch.load('probabilistic_detectors/' + model_architecture + '/best_accuracy_model.pth', map_location=torch.device('cpu')))

    # Validation
    model.eval()
    with torch.no_grad():
        all_preds = []
        for data in set_loader:
            for i in data:
                emb_vecs = i.to(dtype=torch.float).to(device)
                output = model(emb_vecs)
                all_preds.extend([output.cpu().numpy()])

    if config['create_df']['softmax'] == 'yes' and config['create_df']['logit'] == 'yes':
        all_preds = [logit(softmax(values)) for values in all_preds]

    elif config['create_df']['softmax'] == 'yes' and config['create_df']['logit'] == 'no':
        all_preds = [(softmax(values)) for values in all_preds]

    elif config['create_df']['softmax'] == 'no' and config['create_df']['logit'] == 'yes':
        all_preds = [(logit(values)) for values in all_preds]

    df_attribute_set = pd.DataFrame(all_preds)
    df = pd.concat([df, df_attribute_set], axis=1)

df.columns = ['ID', 'spoof_attack', 'target', 'S01', 'S02', 'S03', 'S04', 'S05', 'S06', 'S07', 'S08', 'S09', 'S10', 'S11', 'S12', 'S13', 'S14', 'S15', 'S16', 'S17', 'S18', 'S19', 'S20', 'S21', 'S22', 'S23', 'S24', 'S25']

# Saving the dataframe
df.to_excel(log_dir + config['create_df']['name'] + '.xlsx', index=False)
